package com.keysoft.pigfarm.production.dto;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import lombok.*;
import org.springframework.util.CollectionUtils;

import com.keysoft.pigfarm.common.BaseDto;
import com.keysoft.pigfarm.common.DatePatternEnum;
import com.keysoft.pigfarm.common.SymbolEnum;

import lombok.experimental.SuperBuilder;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Data
@SuperBuilder
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = false)
@ToString(exclude = {"quotas","barn","pig"})
public class ProcessOrderDto extends BaseDto {
  	private Long id;
  	private String code;
  	private BigDecimal quantity;
    private String pigType ;
  	private LocalDate startDate;
  	private LocalDate endDate;
  	private String batch;
  	private Integer week;
  	private LocalDate weekFromDate;
  	private LocalDate weekToDate;
  	private String status;
  	private LocalDateTime createdDate;
  	private boolean latest;
    private List<QuotaDto> quotas;
    private PigDto pig;
    private BarnDto barn;
  	private String transCode;
  	private String materialName;
  	
  	private BigDecimal realQuantity;
  	private LocalDate realStartDate;
  	private LocalDate realEndDate;
  	private ProductionDto production;
  	private List<MaterialDto> materials;
  	private LocalDate closedDate;
  	private Integer realAmount;
  	private BigDecimal realWeigh;
  	private Integer evaluateAmount;
  	private BigDecimal evaluateWeigh;
  	private String confirmType;
  	private String pigLevel;
  	private String productionVer;
    
    // for display in form
    private String pigIdentifier;
    private String startDateDisplay;
    private String endDateDisplay;
    public String getStartDateDisplay() {
    	if (startDate != null) {
    		return DateTimeFormatter.ofPattern(DatePatternEnum.DD_MM_YYYY_1.pattern).format(startDate);	
    	} else {
    		return "";
    	}
    }
    public String getEndDateDisplay() {
    	if (endDate != null) {
    		return DateTimeFormatter.ofPattern(DatePatternEnum.DD_MM_YYYY_1.pattern).format(endDate);	
    	} else {
    		return "";
    	}
    }
    
    private String displayRealStartDate;
    private String displayRealEndDate;
    private String closedDateDisplay;
    public String getDisplayRealStartDate() {
    	if (realStartDate != null) {
    		return DateTimeFormatter.ofPattern(DatePatternEnum.DD_MM_YYYY_1.pattern).format(realStartDate);	
    	} else {
    		return "";
    	}
    }
    public String getDisplayRealEndDate() {
    	if (realEndDate != null) {
    		return DateTimeFormatter.ofPattern(DatePatternEnum.DD_MM_YYYY_1.pattern).format(realEndDate);	
    	} else {
    		return "";
    	}
    }
    
    public String getClosedDateDisplay() {
    	if (closedDate != null) {
    		return DateTimeFormatter.ofPattern(DatePatternEnum.DD_MM_YYYY_1.pattern).format(closedDate);	
    	} else {
    		return "";
    	}
    }
    
    private String farmCode;
    private String farmName ;
    
   // for searching
    private String username;
    private String barnCode ;
    private String startDateSearch;
    private String stage;
    
    private LocalDate startDateSearchFromDate;
    private LocalDate startDateSearchToDate;
    private LocalDate closeDateSearchFromDate;
    private LocalDate closeDateSearchToDate;

	private String searchFromDate;
	private String searchToDate;
	private String searchCloseFromDate;
	private String searchCloseToDate;

	private String displayPostingDate;
    private LocalDate postingDate;
    private String stockCode;
    private List<String> statuses;
    public String getStatusesStr() {
    	if (statuses != null && !CollectionUtils.isEmpty(statuses)) {
    		StringBuilder a = new StringBuilder();
    		for(String s : statuses) {
    			a = a.append(s).append(SymbolEnum.COMMA.val);
    		}
    		return a.toString();	
    	} else {
    		return "";
    	}
    }
}