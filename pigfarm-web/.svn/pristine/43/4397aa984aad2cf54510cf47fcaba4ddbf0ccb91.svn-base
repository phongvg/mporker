package com.keysoft.pigfarm.manager;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.keysoft.pigfarm.common.PageDto;
import com.keysoft.pigfarm.config.ServiceProperties;
import com.keysoft.pigfarm.constant.ApiEnum;
import com.keysoft.pigfarm.master.dto.UserDto;
import com.keysoft.pigfarm.util.RestHelper;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
public class UserManager {
	
	@Autowired
	private RestHelper restHelper;
	
	@Autowired
	private ServiceProperties serviceProperties;
	
	public UserDto get(String id) {
		log.info("process=get-user, user_id={}", id);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_GET.val), HttpMethod.GET, UserDto.class, id);
		
		return (UserDto)response.getBody();
	}
	
	public UserDto getByUsername(String username) {
		log.info("process=get-user, user-username={}", username);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_CHECK_USERNAME.val), HttpMethod.GET, UserDto.class, username);
		return (UserDto) response.getBody();
	}
	
	public Boolean getByEmail(String mail) {
		log.info("process=get-user, user-mail={}", mail);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_CHECK_EMAIL.val), HttpMethod.GET, Boolean.class, mail);
		return (Boolean) response.getBody();
	}

	
	public PageDto gets(Integer page, Integer size) {
		log.info("process=get-users, page={}, size={}", page, size);
		StringBuilder builder = new StringBuilder();
		builder.append(serviceProperties.getPaths().get(ApiEnum.PATH_USER_GETS.val)).append("?page=").append(page).append("&size=").append(size);
		ResponseEntity<?> response = restHelper.send(builder.toString(), HttpMethod.GET, PageDto.class);
		return (PageDto)response.getBody();
	}

	@SuppressWarnings("unchecked")
	public List<UserDto> getAllUsers() {
		log.info("process=getAllUsers()...");
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_GET_ALL_USERS.val), HttpMethod.POST, new ParameterizedTypeReference<List<UserDto>>() {});
		return (List<UserDto>) response.getBody();
	}
	
	
	@SuppressWarnings("unchecked")
	public List<UserDto> gets() {
		log.info("process=get-users");
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_GETS.val), HttpMethod.GET, new ParameterizedTypeReference<List<UserDto>>() {});
		
		return (List<UserDto>)response.getBody();
	}
	
	public void delete(Long id) {
		log.info("process=delete-user, user_id={}", id);
	}
	
	public boolean isExistedUsername(String username) {
		log.info("process=check-username");
		ResponseEntity<?> response= restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_CHECK_USERNAME.val), HttpMethod.GET, Boolean.class, username);
		return (boolean) response.getBody();
	} 
	
	public PageDto search(UserDto criteria) {
		log.info("process=get-users, criteria={}", criteria);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_GETS.val), HttpMethod.POST, criteria, PageDto.class);
		PageDto page = (PageDto)response.getBody();
		return page;
	}
	
	
	public UserDto save(UserDto appUserDto) {
		log.info("process=save-user, appUserDto=", appUserDto);
		ResponseEntity<?> response = null;
		response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_CREATE.val), HttpMethod.POST, appUserDto, UserDto.class);
        return (UserDto)response.getBody();
	}
	
	public UserDto resetPassword(UserDto user) {
		log.info("process='reset-password'");
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_RESET_PASSWORD.val), HttpMethod.POST, user, UserDto.class);
		return (UserDto) response.getBody();
	}

	public String getMailReportByUserLogin() {
		log.info("process='get-mail-report'");
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_MAIL_REPORT.val), HttpMethod.GET, String.class);
		return (String) response.getBody();
	}

	public UserDto saveInfo(UserDto appUserDto) {
		log.info("process=save-user-info, appUserDto=", appUserDto);
		ResponseEntity<?> response = null;
		if (appUserDto.getId() != null) {
			response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_INFO_UPDATE.val), HttpMethod.PUT, appUserDto, UserDto.class, appUserDto.getId());
		} else {
			response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_CREATE.val), HttpMethod.POST, appUserDto, UserDto.class);
		}
		
        return (UserDto)response.getBody();
	}
	
	public UserDto savePrivileges(UserDto appUserDto) {
		log.info("process=save-user-privileges, appUserDto=", appUserDto);
		
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_PRIVILEGES_CREATE.val), HttpMethod.POST, appUserDto, UserDto.class);
        return (UserDto)response.getBody();
	}
	
	public UserDto getAdminUser(Long id) {
		log.info("process=get-admin-user, user_id={}", id);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_ADMIN_GET.val), HttpMethod.GET, UserDto.class, id);
		
		return (UserDto)response.getBody();
	}
	
	public UserDto saveAdminUser(UserDto appUserDto) {
		log.info("process=save-admin-user, appUserDto=", appUserDto);
		
		ResponseEntity<?> response = null;
		if (appUserDto.getId() != null)
			response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_ADMIN_UPDATE.val), HttpMethod.PUT, appUserDto, UserDto.class, appUserDto.getId());
		else 
			response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_ADMIN_CREATE.val), HttpMethod.POST, appUserDto, UserDto.class);
		
        return (UserDto)response.getBody();
	}
	
	public UserDto getByProfileId(Long id) {
		log.info("process=get-by-profile={}", id);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_USER_GET_PROFILE_ID.val)
									, HttpMethod.GET, UserDto.class, id);
		return (UserDto)response.getBody();
	}
	
	public boolean checkChangeDate() {
		return false;
	}
	
}