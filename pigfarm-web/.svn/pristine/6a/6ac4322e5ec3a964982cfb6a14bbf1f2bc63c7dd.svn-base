package com.keysoft.pigfarm.controller;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.common.EntityResponseCodeEnum;
import com.keysoft.pigfarm.common.GoodsReceiptMovementTypeEnum;
import com.keysoft.pigfarm.common.GoodsReceiptStatusEnum;
import com.keysoft.pigfarm.common.GoodsReceiptTransTypeEnum;
import com.keysoft.pigfarm.common.GoodsReceiptTypeEnum;
import com.keysoft.pigfarm.common.GoodsRequisitionStatusEnum;
import com.keysoft.pigfarm.common.GoodsRequisitionTypeEnum;
import com.keysoft.pigfarm.common.MaterialTypeEnum;
import com.keysoft.pigfarm.common.TransCodeTypeEnum;
import com.keysoft.pigfarm.integration.EntityResponse;
import com.keysoft.pigfarm.manager.FarmManager;
import com.keysoft.pigfarm.manager.GoodsReceiptManager;
import com.keysoft.pigfarm.manager.GoodsRequisitionManager;
import com.keysoft.pigfarm.manager.StockManager;
import com.keysoft.pigfarm.manager.TransCodeManager;
import com.keysoft.pigfarm.production.dto.FarmDto;
import com.keysoft.pigfarm.production.dto.GoodsReceiptDto;
import com.keysoft.pigfarm.production.dto.GoodsRequisitionDto;
import com.keysoft.pigfarm.production.dto.MaterialDetailDto;
import com.keysoft.pigfarm.production.dto.SearchDto;
import com.keysoft.pigfarm.production.dto.StockDto;
import com.keysoft.pigfarm.util.UserContext;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class GoodsReceiptController extends BaseController {

	@Autowired
    private GoodsReceiptManager goodsReceiptManager;
	@Autowired
	private GoodsRequisitionManager goodsRequisitionManager;
	@Autowired
	private StockManager stockManager;
	@Autowired
	private TransCodeManager transCodeManager;
	@Autowired
	private FarmManager farmManager;
	
	Map<String, SearchDto> userSearchs = new HashMap<>();

    @GetMapping("/goodsReceipt/list")
    public ModelAndView list(HttpServletRequest request) throws Exception {
    	log.debug("ENTERING 'LIST GOODS_RECEIPT' METHOD...");
    	
    	String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			String lastUrl = searchDto.getLatestUrl();
			
			if(lastUrl.equals(url) && searchDto.getSearchGReceipt() != null) {
				return search(searchDto.getSearchGReceipt(), request);
			}
		}
		
		ModelAndView modelAndView = new ModelAndView("goodsreceipt-list");
		GoodsReceiptDto criteria = new GoodsReceiptDto();
    	criteria.setType(GoodsReceiptTypeEnum.GOODS_RECEIPT.val);
    	criteria.setSize(appProperties.getDefaultPageSize());
    	criteria.setPage(appProperties.getDefaultPage());
    	
    	List<String> grStatus = new ArrayList<String>();
    	grStatus.add(GoodsReceiptStatusEnum.SYCNCHRONIZED.val);
    	grStatus.add(GoodsReceiptStatusEnum.CONFIRMED.val);
    	grStatus.add(GoodsReceiptStatusEnum.CANCEL.val);
    	modelAndView.addObject("grStatus", grStatus);
		modelAndView.addObject("page", goodsReceiptManager.search(criteria));
		modelAndView.addObject("grTemplates", goodsReceiptManager.getTemplates());
		modelAndView.addObject("criteria", criteria);

        return modelAndView;
    }
    
    @PostMapping("/goodsReceipt/list")
    public ModelAndView search(@Valid GoodsReceiptDto criteria, HttpServletRequest request){
    	log.debug("ENTERING 'SEARCH GOODS_RECEIPT' METHOD...");
		ModelAndView modelAndView = new ModelAndView("goodsreceipt-list");
		if(criteria != null && criteria.getSize() == null){
			criteria.setSize(appProperties.getDefaultPageSize());
	    	criteria.setPage(appProperties.getDefaultPage());
	    }
		List<String> grStatus = new ArrayList<String>();
    	grStatus.add(GoodsReceiptStatusEnum.SYCNCHRONIZED.val);
    	grStatus.add(GoodsReceiptStatusEnum.CONFIRMED.val);
    	grStatus.add(GoodsReceiptStatusEnum.CANCEL.val);
    	modelAndView.addObject("grTemplates", goodsReceiptManager.getTemplates());
    	modelAndView.addObject("grStatus", grStatus);
		modelAndView.addObject("page", goodsReceiptManager.search(criteria));
		modelAndView.addObject("criteria", criteria);
		
		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			searchDto.setSearchGReceipt(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		} else {
			SearchDto searchDto = new SearchDto();
			searchDto.setSearchGReceipt(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		}
		
        return modelAndView;
    }
    
	@ModelAttribute
    @GetMapping("/goodsReceipt/form")
    public ModelAndView show(@RequestParam (value="grId", required=false) Long grId,@RequestParam (value="id", required=false) Long id, HttpServletRequest request) throws Exception {
		log.debug("ENTERING 'SHOW GOODS_RECEIPT' METHOD...");
		Locale locale = request.getLocale();
    	ModelAndView modelAndView = new ModelAndView("goodsreceipt-form");
    	GoodsReceiptDto goodsReceipt = new GoodsReceiptDto();
    	String username = UserContext.getUsername();
    	List<MaterialDetailDto> materialExistings = new ArrayList<>();
    	// neu id != null => xem chi tiet thong tin phieu xac nhan nhap kho
    	if(id != null) {
    		goodsReceipt = goodsReceiptManager.get(id);
    		if(goodsReceipt == null) {
        		addError(request, getText("data.notfound", locale));
				return new ModelAndView("redirect:/goodsReceipt/list");
        	}
    		
    		if(goodsReceipt.getType().equals(GoodsReceiptTypeEnum.TEMPLATE.val)) {
    			goodsReceipt.setTransCode(transCodeManager.getTransCode(TransCodeTypeEnum.GOODS_RECEIPT.val));
    		}
    		if(!CollectionUtils.isEmpty(goodsReceipt.getMaterialDetails())) {
    			materialExistings = goodsReceipt.getMaterialDetails();
    		} else {
    			materialExistings.add(new MaterialDetailDto());
    		}
    	} else {
    		materialExistings.add(new MaterialDetailDto());
    		goodsReceipt.setTransCode(transCodeManager.getTransCode(TransCodeTypeEnum.GOODS_RECEIPT.val));
    		goodsReceipt.setStatus(GoodsReceiptStatusEnum.CONFIRMED.val);
    		goodsReceipt.setTransType(GoodsReceiptTransTypeEnum.GR_OTHER.val);
    		goodsReceipt.setMovementType(GoodsReceiptMovementTypeEnum.INVENTORY.val);
    	}
    	
    	// neu goods requisition id != null => tao form xac nhan nhap kho
    	if(grId != null) {
    		List<MaterialDetailDto> materialDetailExistings = new ArrayList<>();
    		GoodsRequisitionDto goodsRequisition = goodsRequisitionManager.get(grId);
    		if(!CollectionUtils.isEmpty(goodsRequisition.getMaterialDetails())) {
    			goodsRequisition.getMaterialDetails().stream().forEach(item ->{
    				if(item.getRetained().compareTo(BigDecimal.ZERO) == 1) {
    					materialDetailExistings.add(item);
    				}
    			});
    			if(!CollectionUtils.isEmpty(materialDetailExistings)) {
    				materialExistings = materialDetailExistings;
    			} else {
    				materialExistings.add(new MaterialDetailDto());
    			}
    		} else {
    			materialExistings.add(new MaterialDetailDto());
    		}
    		BeanUtils.copyProperties(goodsRequisition, goodsReceipt);
    		goodsReceipt.setStock(goodsRequisition.getStock());
    		goodsReceipt.setId(null);
    		goodsReceipt.setStatus(GoodsReceiptStatusEnum.CONFIRMED.val);
    		goodsReceipt.setTransCode(transCodeManager.getTransCode(TransCodeTypeEnum.GOODS_RECEIPT.val));
    		goodsReceipt.setCreatedDate(LocalDateTime.now());
    		goodsReceipt.setGoodsRequisitionId(grId);
    	}
    	goodsReceipt.setCreatedPerson(username);
    	goodsReceipt.setMarkDel(false);
    	List<StockDto> stocks = stockManager.gets();
    	List<FarmDto> farms = farmManager.getFarmByUserName();
		modelAndView.addObject("farms", farms);
    	modelAndView.addObject("stocks", stocks);
		modelAndView.addObject("materialExistings", materialExistings);
		modelAndView.addObject("goodsReceipt", goodsReceipt);
		List<String> materialTypes = new ArrayList<String>();
		materialTypes.add(MaterialTypeEnum.USED.val);
		materialTypes.add(MaterialTypeEnum.WATTING.val);
    	modelAndView.addObject("materialTypes", materialTypes);
        return modelAndView;
    }

    @PostMapping("/goodsReceipt/save")
    public String save(@Valid GoodsReceiptDto goodsReceiptDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
    	log.debug("ENTERING 'SAVE GOODS_RECEIPT' METHOD...");

        Locale locale = request.getLocale();
        String view = "goodsreceipt-form";
        if(goodsReceiptDto.getId() != null) {
        	 view = "goodsReceipt/form?id=" + goodsReceiptDto.getId();
        }
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        view = "redirect:/goodsReceipt/list";
        try {
            if(StringUtils.isBlank(goodsReceiptDto.getTransType())) {
            	goodsReceiptDto.setTransType(GoodsReceiptTransTypeEnum.GR_OTHER.val);
            }
            if(StringUtils.isBlank(goodsReceiptDto.getTransCode())) {
            	goodsReceiptDto.setTransCode(transCodeManager.getTransCode(TransCodeTypeEnum.GOODS_RECEIPT.val));
            }
            if(goodsReceiptDto.getStatus().equals(GoodsReceiptStatusEnum.CANCEL.val)) {
                EntityResponse result = goodsReceiptManager.cancel(goodsReceiptDto);
                if(result.getCode().equals(EntityResponseCodeEnum.SUCCESS_200.val)) {
                	addMessage(request, getText("goodsReceipt.cancel.success", locale));
                } else if(result.getCode().equals(EntityResponseCodeEnum.ERROR_400.val)){
   	        	     addError(request, getText("data.lock.15.minutes", locale));
 	  	        } else {
 	  	        	  addError(request, result.getMessage());
 	  	        }
            } else {
            	EntityResponse result = goodsReceiptManager.save(goodsReceiptDto);
            	if(result.getCode().equals(EntityResponseCodeEnum.SUCCESS_200.val)) {
               	 	addMessage(request, getText("goodsReceipt.updated.success", locale));
                } else if(result.getCode().equals(EntityResponseCodeEnum.ERROR_400.val)){
  	        	     addError(request, getText("data.lock.15.minutes", locale));
	  	        } else {
	  	        	  addError(request, result.getMessage());
	  	        }
            }
		} catch (Exception e) {
			log.error("ERROR SAVE GOODS_RECEIPT: EXCEPTION: {}", e);
			addError(request, e.getMessage());
		}
        return view;
    }
    
    @GetMapping("/goodsReceipt/delete/{id}")
    public String deleteGRTemplate(@PathVariable(value="id")Long id,HttpServletRequest request) {
    	log.debug("ENTERING 'DELETE GOODS_RECEIPT' METHOD...");
    	Locale locale = request.getLocale();
    	String view = "redirect:/goodsReceipt/list";
    	try {
    		goodsReceiptManager.delete(id);
    		addMessage(request, getText("goodsReceipt.delete.success", locale));
		} catch (Exception e) {
			log.error("ERROR DELETE GOODS_RECEIPT: EXCEPTION: {}", e);
			addError(request, e.getMessage());
		}
    	return view;
    }
    
    //-------------- Goods Receipt Requisition-----------//
    @GetMapping("/goodsReceipt-Requisition/list")
    public ModelAndView goodsReceiptRequisitions(HttpServletRequest request) throws Exception {
    	log.debug("ENTERING 'LIST GOODS_RECEIPT_REQUISITION' METHOD...");
    	
    	String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			String lastUrl = searchDto.getLatestUrl();
			
			if(lastUrl.equals(url) && searchDto.getSearchGRequition() != null) {
				return searchGoodsReceiptRequisitions(searchDto.getSearchGRequition(), request);
			}
		}
		
		ModelAndView modelAndView = new ModelAndView("goodsreceipt-requisition-list");
		GoodsRequisitionDto criteria = new GoodsRequisitionDto();
    	criteria.setType(GoodsRequisitionTypeEnum.GOODS_RECEIPT_REQUISITION.val);
    	criteria.setSize(appProperties.getDefaultPageSize());
    	criteria.setPage(appProperties.getDefaultPage());
    	
    	List<String> grStatus = new ArrayList<String>();
    	grStatus.add(GoodsRequisitionStatusEnum.FINISHED.val);
    	grStatus.add(GoodsRequisitionStatusEnum.PROCESSING.val);
    	grStatus.add(GoodsRequisitionStatusEnum.RECEIVED.val);
    	
		modelAndView.addObject("page", goodsRequisitionManager.gets(criteria));
		modelAndView.addObject("criteria", criteria);
		modelAndView.addObject("grStatus", grStatus);

        return modelAndView;
    }
    
    @PostMapping("/goodsReceipt-Requisition/list")
    public ModelAndView searchGoodsReceiptRequisitions(@Valid GoodsRequisitionDto criteria, HttpServletRequest request){
    	log.debug("ENTERING 'SEARCH GOODS_RECEIPT_REQUISITION' METHOD...");
		ModelAndView modelAndView = new ModelAndView("goodsreceipt-requisition-list");
		if(criteria != null && criteria.getSize() == null){
			criteria.setSize(appProperties.getDefaultPageSize());
	    	criteria.setPage(appProperties.getDefaultPage());
	    }
		List<String> grStatus = new ArrayList<String>();
    	grStatus.add(GoodsRequisitionStatusEnum.FINISHED.val);
    	grStatus.add(GoodsRequisitionStatusEnum.PROCESSING.val);
    	grStatus.add(GoodsRequisitionStatusEnum.RECEIVED.val);
		
    	modelAndView.addObject("grStatus", grStatus);
		modelAndView.addObject("page", goodsRequisitionManager.gets(criteria));
		modelAndView.addObject("criteria", criteria);
		
		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			searchDto.setSearchGRequition(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		} else {
			SearchDto searchDto = new SearchDto();
			searchDto.setSearchGRequition(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		}
		
        return modelAndView;
    }
    
    @ModelAttribute
    @GetMapping("/goodsReceipt-Requisition/form")
    public ModelAndView showForm(@RequestParam (value="id", required=false) Long id, HttpServletRequest request) throws Exception {
    	log.debug("ENTERING 'SHOW GOODS_RECEIPT_REQUISITION' METHOD...");
    	Locale locale = request.getLocale();
    	ModelAndView modelAndView = new ModelAndView("goodsreceipt-requisition-form");
    	GoodsRequisitionDto goodsRequisition = new GoodsRequisitionDto();
    	List<MaterialDetailDto> materialExistings = new ArrayList<>();
    	if(id != null) {
    		goodsRequisition = goodsRequisitionManager.get(id);
    		if(goodsRequisition == null) {
        		addError(request, getText("data.notfound", locale));
				return new ModelAndView("redirect:/goodsReceipt-Requisition/list");
        	}
    		
    		if(!CollectionUtils.isEmpty(goodsRequisition.getMaterialDetails())) {
    			materialExistings = goodsRequisition.getMaterialDetails();
    		} else {
    			materialExistings.add(new MaterialDetailDto());
    		}
    	} else {
    		modelAndView.setViewName("redirect:/goodsReceipt-Requisition/list");
    		addError(request, getText("goodsReceipt.requisition.notfound", locale));
    	}
    	List<StockDto> stocks = stockManager.gets();	
		modelAndView.addObject("materialExistings", materialExistings);
		modelAndView.addObject("stocks", stocks);
        modelAndView.addObject("goodsReceipt", goodsRequisition);

        return modelAndView;
    }
    
    @GetMapping("/goodsReceipt-Requisition/delete/{id}")
    public String deleteGoodsRequisition(@PathVariable(value="id")Long id,HttpServletRequest request) {
    	log.debug("ENTERING 'DELETE GOODS_RECEIPT_REQUISITION' METHOD...");
    	
    	Locale locale = request.getLocale();
    	String view = "redirect:/goodsReceipt-Requisition/list";	
    	try {
    		EntityResponse response = goodsRequisitionManager.delete(id);
    		if (response.getCode().equals(EntityResponseCodeEnum.SUCCESS_200.val))
    			addMessage(request, getText("goodsReceipt.requisition.delete.success", locale));
    		else
    			addError(request, getText("goodsReceipt.requisition.delete.fail", locale));
		} catch (Exception e) {
			log.error("ERROR DELETE GOODS_RECEIPT_REQUISITION: EXCEPTION: {}", e);
			addError(request, getText("goodsReceipt.requisition.delete.fail", locale));
		}
    	return view;
    }
}