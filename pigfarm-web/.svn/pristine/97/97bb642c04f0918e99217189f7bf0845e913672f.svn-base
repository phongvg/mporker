package com.keysoft.pigfarm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.common.MapKeyEnum;
import com.keysoft.pigfarm.constant.ModelViewEnum;
import com.keysoft.pigfarm.manager.MaterialManager;
import com.keysoft.pigfarm.production.dto.MaterialDto;
import com.keysoft.pigfarm.production.dto.UnitConversionDto;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
 @Controller
public class MaterialController extends BaseController {

	@Autowired
    private MaterialManager materialManager;

    @GetMapping("/material/list")
    public ModelAndView list(HttpServletRequest request) throws Exception {
    	log.debug("entering 'list' method...");
    	MaterialDto criteria = 	new MaterialDto();
    	criteria.setSize(appProperties.getDefaultPageSize());
    	criteria.setPage(appProperties.getDefaultPage());
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_MATERIAL_LIST.mav); 
    	modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, materialManager.search(criteria));
    	modelAndView.addObject("criteria", criteria);
        return modelAndView;
    }
    
    @PostMapping("/material/list")
    public ModelAndView search(@Valid MaterialDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
    	if(criteria != null && criteria.getSize() == null){
    		criteria.setSize(appProperties.getDefaultPageSize());
        	criteria.setPage(appProperties.getDefaultPage());
    	}
		ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_MATERIAL_LIST.mav);
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, materialManager.search(criteria));
		modelAndView.addObject("criteria", criteria);
        return modelAndView;
    }
    
    @SuppressWarnings("unchecked")
	@ModelAttribute
    @GetMapping("/material/form")
    public ModelAndView show(@RequestParam (value="id", required=false) Long id) throws Exception {
    	log.debug("entering 'show' method...");
    
    	ModelAndView modelAndView = new ModelAndView("material-form");
    	MaterialDto material = new MaterialDto();
    	List<UnitConversionDto> unitConversions = new ArrayList<>();
    	if(id != null) {
    		material = materialManager.get(id);
    		if(material.getUnitConversion() != null) {
    			unitConversions = (List<UnitConversionDto>) material.getUnitConversion().get(MapKeyEnum.UNIT_CONVERSION.key);
    		}
    	}
		modelAndView.addObject("unitConversions", unitConversions);
		modelAndView.addObject("material", material);

        return modelAndView;
    }
    
    @PostMapping("/material/save")
    public String save(@Valid MaterialDto materialDto, BindingResult bindingResult, HttpServletRequest request) {
        log.debug("entering 'save' method...");
        Locale locale = request.getLocale();
        String view = "redirect:/material/list";
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        try {
        	Map<String, Object> map = new HashMap<String, Object>();
            List<UnitConversionDto> unitConversionDtos = new ArrayList<>();
            if(materialDto.getUnitConversions() != null && !materialDto.getUnitConversions().isEmpty()) {
            	unitConversionDtos = materialDto.getUnitConversions();
            }
            map.put(MapKeyEnum.UNIT_CONVERSION.key, unitConversionDtos);
            materialDto.setUnitConversion(map);
            
        	MaterialDto savedMaterial = materialManager.save(materialDto);
            if(savedMaterial != null) {
            	 addMessage(request, getText("material.updated.success", locale));
            } else {
            	addError(request, getText("material.updated.fail", locale));
            }
		} catch (Exception e) {
			log.error("Save MATERISL error : Exception{}" , e);
			addError(request, getText("material.updated.fail", locale));
		}
        return view;
    }
    
    @PostMapping("/materails/search/{code}")
    @ResponseBody
    public List<MaterialDto> searchByCode(@PathVariable(required = true) String code) throws Exception {
    	log.info("process=search-material-by-code, {}", code);
		return materialManager.gets(code);
    }
}
