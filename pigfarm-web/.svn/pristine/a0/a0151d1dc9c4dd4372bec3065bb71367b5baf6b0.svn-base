package com.keysoft.pigfarm.controller;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.common.DatePatternEnum;
import com.keysoft.pigfarm.common.ProcessOrderStatusEnum;
import com.keysoft.pigfarm.constant.ModelViewEnum;
import com.keysoft.pigfarm.helper.DateTimeHelper;
import com.keysoft.pigfarm.integration.EntityResponse;
import com.keysoft.pigfarm.manager.ProcessOrderManager;
import com.keysoft.pigfarm.manager.ProductionManager;
import com.keysoft.pigfarm.manager.SyncDataManager;
import com.keysoft.pigfarm.production.dto.ProcessOrderDto;
import com.keysoft.pigfarm.production.dto.SearchDto;
import com.keysoft.pigfarm.production.json.SyncResponse;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class ProcessOrderController extends BaseController {

	@Autowired
    private ProcessOrderManager processOrderManager;
	@Autowired
	private SyncDataManager syncDataManager;
	@Autowired
	private ProductionManager productionManager;
	
	Map<String, SearchDto> userSearchs = new HashMap<>();
	
    @GetMapping("/processOrder/list")
    public ModelAndView list(HttpServletRequest request) throws Exception {
    	log.debug("ENTERING 'LIST PROCESS_ORDER' METHOD...");
    	String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			String lastUrl = searchDto.getLatestUrl();
			
			if(lastUrl.equals(url) && searchDto.getSearchProcessOrder() != null) {
				return search(searchDto.getSearchProcessOrder(), request);
			}
		}
		
    	ProcessOrderDto criteria = new ProcessOrderDto();
    	criteria.setSize(appProperties.getDefaultPageSize());
    	criteria.setPage(appProperties.getDefaultPage());
    	HashMap<String, String> processOrderStatus = new HashMap<>();
		EnumSet.allOf(ProcessOrderStatusEnum.class).stream().forEach(s -> processOrderStatus.put(s.name(), s.status));
		ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_PROCESS_ORDER_LIST.mav);
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, processOrderManager.search(criteria));
		modelAndView.addObject("processOrderStatus" ,  processOrderStatus);
		modelAndView.addObject(ModelViewEnum.MODEL_CRITERIA.mav , criteria);
        return modelAndView;
    }
    
    @PostMapping("/processOrder/list")
    public ModelAndView search(@Valid ProcessOrderDto criteria, HttpServletRequest request){
    	log.debug("ENTERING 'SEARCH PROCESS_ORDER' METHOD...");
    	if(criteria != null && criteria.getSize() == null){
			criteria.setSize(appProperties.getDefaultPageSize());
	    	criteria.setPage(appProperties.getDefaultPage());
    	}
    	
    	HashMap<String, String> processOrderStatus = new HashMap<>();
		EnumSet.allOf(ProcessOrderStatusEnum.class).stream().forEach(s -> processOrderStatus.put(s.name(), s.status));
		ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_PROCESS_ORDER_LIST.mav);
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, processOrderManager.search(criteria));
		modelAndView.addObject("processOrderStatus" ,  processOrderStatus);
		modelAndView.addObject(ModelViewEnum.MODEL_CRITERIA.mav , criteria);
		
		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			searchDto.setSearchProcessOrder(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		} else {
			SearchDto searchDto = new SearchDto();
			searchDto.setSearchProcessOrder(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		}
		
        return modelAndView;
    }
   
    @ModelAttribute
    @GetMapping("/processOrder/form")
    public ModelAndView show(@RequestParam(value="id", required=true) Long id, HttpServletRequest request) {
    	log.debug("ENTERING 'SHOW PROCESS_ORDER' METHOD...");
    	Locale locale = request.getLocale();
    	
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_PROCESS_ORDER_FORM.mav);
    	ProcessOrderDto processOrderDto = processOrderManager.get(id);
    	if(processOrderDto == null) {
    		addError(request, getText("data.notfound", locale));
			return new ModelAndView("redirect:/processOrder/list");
    	}
    	Integer totalPigRetained = productionManager.getTotalPigRetainedByPoCode(processOrderDto.getCode()); 
    	modelAndView.addObject("totalPigRetained", totalPigRetained);
		modelAndView.addObject("processOrder", processOrderDto);
		return modelAndView;
    }
    
    @ModelAttribute
    @GetMapping("/processOrder/form/byCode")
    public ModelAndView showByPoCode(@RequestParam(value="code", required=true) String code, HttpServletRequest request) {
    	log.debug("ENTERING 'SHOW PROCESS_ORDER BY CODE' METHOD...");
    	Locale locale = request.getLocale();
    	
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_PROCESS_ORDER_FORM.mav);
    	ProcessOrderDto processOrderDto = processOrderManager.getByCode(code);
    	if(processOrderDto == null) {
    		addError(request, getText("data.notfound", locale));
			return new ModelAndView("redirect:/processOrder/list");
    	}
    	Integer totalPigRetained = productionManager.getTotalPigRetainedByPoCode(processOrderDto.getCode()); 
    	modelAndView.addObject("totalPigRetained", totalPigRetained);
		modelAndView.addObject("processOrder", processOrderDto);
		return modelAndView;
    }

    @PostMapping("/processOrder/confirmed")
    public String save(ProcessOrderDto processOrderDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
    	log.debug("ENTERING 'SAVE PROCESS_ORDER' METHOD...");
        Locale locale = request.getLocale();
        String view = "processorder-form";       
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        try {
        	// Truong hop dong lenh san xuat
        	if(processOrderDto.getStatus().equals(ProcessOrderStatusEnum.CLOSED.status)) {
    			// truong hop xac nhan lenh san xuat
        		EntityResponse result  = processOrderManager.confirm(processOrderDto);
        		if (result != null) {
        			if(String.valueOf(HttpStatus.OK.value()).equals(result.getCode())) {
        				SyncResponse syncResponse = syncDataManager.closedPO(processOrderDto.getTransCode());
        				if (String.valueOf(HttpStatus.OK.value()).equals(syncResponse.getCode())) {
        					addMessage(request, getText("processOrder.updated.closed.success", locale));
        				} else {
            				addError(request, syncResponse.getMessage());
            			}
                    } else {
                    	addError(request, result.getMessage());
                    	view = "redirect:/processOrder/form?id=" + processOrderDto.getId();
                    }
        		} else {
            		addError(request, "ERROR: Khong co ket qua tra ve");
                	view = "redirect:/processOrder/form?id=" + processOrderDto.getId();
        		}
        	} else {
        		// truong hop xac nhan lenh san xuat
        		EntityResponse result  = processOrderManager.confirm(processOrderDto);
                if(String.valueOf(HttpStatus.OK.value()).equals(result.getCode())) {
                	addMessage(request, getText("processOrder.updated.confirmed", locale));
                } else {
                	addError(request, result.getMessage());
                	view = "redirect:/processOrder/form?id=" + processOrderDto.getId();
                }
        	}
		} catch (Exception e) {
			log.debug("ERROR SAVE PROCESS_ORDER: EXCEPTION: {}", e);
			addError(request, e.getMessage());
    		view = "redirect:/processOrder/form?id=" + processOrderDto.getId();
			
		}
        view = "redirect:/processOrder/list";
        return view;
    }   
    
}