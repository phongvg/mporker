package com.keysoft.pigfarm.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import com.keysoft.pigfarm.production.dto.SearchDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.common.MaterialStatusEnum;
import com.keysoft.pigfarm.manager.DocumentTypeManager;
import com.keysoft.pigfarm.production.dto.DocumentTypeDto;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class DocumentTypeController extends BaseController {

	@Autowired
    private DocumentTypeManager documentTypeManager;

	Map<String, SearchDto> userSearchs = new HashMap<>();

    @GetMapping("/documentType/list")
    public ModelAndView list(HttpServletRequest request) throws Exception {
    	log.debug("entering 'list' method...");

		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			String lastUrl = searchDto.getLatestUrl();

			if(lastUrl.equals(url) && searchDto.getSearchDocumentType() != null) {
				return search(searchDto.getSearchDocumentType(), request);
			}
		}

		ModelAndView modelAndView = new ModelAndView("document-type-list");
		DocumentTypeDto criteria = DocumentTypeDto.builder().page(appProperties.getDefaultPage()).size(appProperties.getDefaultPageSize()).build();	
		List<String> documentTypeStatus = new ArrayList<>();
		Arrays.asList(MaterialStatusEnum.values()).forEach(item -> documentTypeStatus.add(item.val));
		
		modelAndView.addObject("documentTypeStatus", documentTypeStatus);
		modelAndView.addObject("page", documentTypeManager.gets(criteria));

        return modelAndView;
    }
    
    @PostMapping("/documentType/list")
    public ModelAndView search(@Valid DocumentTypeDto criteria, HttpServletRequest request){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("document-type-list");
		List<String> documentTypeStatus = new ArrayList<>();
		Arrays.asList(MaterialStatusEnum.values()).forEach(item -> documentTypeStatus.add(item.val));
		
		modelAndView.addObject("documentTypeStatus", documentTypeStatus);
		modelAndView.addObject("page", documentTypeManager.gets(criteria));
		modelAndView.addObject("criteria", criteria);

		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			searchDto.setSearchDocumentType(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		} else {
			SearchDto searchDto = new SearchDto();
			searchDto.setSearchDocumentType(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		}
		
        return modelAndView;
    }
    
    @ModelAttribute
    @GetMapping("/documentType/form")
    public ModelAndView show(@RequestParam (value="id", required=false) Long id, HttpServletRequest request) throws Exception {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("document-type-form");
    	List<String> documentTypeStatus = new ArrayList<>();
		Arrays.asList(MaterialStatusEnum.values()).forEach(item -> documentTypeStatus.add(item.val));
		
		modelAndView.addObject("documentTypeStatus", documentTypeStatus);
		DocumentTypeDto documentType = new DocumentTypeDto();
		
		if(id != null) {
			documentType = documentTypeManager.get(id);
   			if(documentType == null) {
   	    		addError(request, getText("data.notfound", request.getLocale()));
   	    		return new ModelAndView("redirect:/documentType/list");
   	    	}
		}
		
		modelAndView.addObject("documentType", documentType);

        return modelAndView;
    }

    @PostMapping("/documentType/save")
    public String save(DocumentTypeDto documentTypeDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) throws Exception {
        log.debug("entering 'save' method...");

        Locale locale = request.getLocale();
        String view = "document-type-form";
        Long id = documentTypeDto.getId();
        
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        
        documentTypeManager.save(documentTypeDto);
        addMessage(request, getText(id != null ? "document.type.updated" : "document.type.added", locale));
        view = "redirect:/documentType/list";

        return view;
    }
    
}