package com.keysoft.pigfarm.controller;

import java.io.IOException;
import java.time.LocalDate;
import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import com.keysoft.pigfarm.common.*;
import com.keysoft.pigfarm.manager.SystemParameterManager;
import com.keysoft.pigfarm.production.dto.*;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.integration.EntityResponse;
import com.keysoft.pigfarm.manager.DocumentManager;
import com.keysoft.pigfarm.manager.DocumentTypeManager;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Controller
@RequestMapping("/document")
public class DocumentController extends BaseController {

	@Autowired
    private DocumentManager documentManager;
	@Autowired
    private DocumentTypeManager documentTypeManager;
	@Autowired
	private SystemParameterManager systemParameterManager;

	
	@Value("${app.attachment.max-size}")
	private Integer maxSize;

	Map<String, SearchDto> userSearchs = new HashMap<>();

    @GetMapping("/list")
    public ModelAndView list(HttpServletRequest request) throws Exception {
    	log.debug("entering 'list' method...");

		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			String lastUrl = searchDto.getLatestUrl();

			if(lastUrl.equals(url) && searchDto.getSearchDocument() != null) {
				return search(searchDto.getSearchDocument(), request);
			}
		}

		ModelAndView modelAndView = new ModelAndView("document-list");
		DocumentDto criteria = DocumentDto.builder().page(appProperties.getDefaultPage()).size(appProperties.getDefaultPageSize()).build();	
		List<String> documentStatus = new ArrayList<>();
		Arrays.asList(DocumentStatusEnum.values()).forEach(item -> documentStatus.add(item.val));
		
		modelAndView.addObject("documentStatus", documentStatus);
		modelAndView.addObject("page", documentManager.gets(criteria));

        return modelAndView;
    }
    
    @PostMapping("/list")
    public ModelAndView search(@Valid DocumentDto criteria, HttpServletRequest request){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("document-list");
		List<String> documentStatus = new ArrayList<>();
		Arrays.asList(DocumentStatusEnum.values()).forEach(item -> documentStatus.add(item.val));
		
		modelAndView.addObject("documentStatus", documentStatus);
		modelAndView.addObject("page", documentManager.gets(criteria));
		modelAndView.addObject("criteria", criteria);

		String userName = request.getUserPrincipal().getName();
		String url = request.getRequestURI();
		if(userSearchs.containsKey(userName)) {
			SearchDto searchDto = userSearchs.get(userName);
			searchDto.setSearchDocument(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		} else {
			SearchDto searchDto = new SearchDto();
			searchDto.setSearchDocument(criteria);
			searchDto.setLatestUrl(url);
			userSearchs.put(userName, searchDto);
		}

        return modelAndView;
    }
    
    @ModelAttribute
    @GetMapping("/form")
    public ModelAndView show(@RequestParam (value="id", required=true) Long id, HttpServletRequest request) throws Exception {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView("document-form");
		DocumentDto document = null;
		if(id != null) {
			document = documentManager.get(id);
		}
		if(document == null) {
	    	addError(request, getText("data.notfound", request.getLocale()));
	    	return new ModelAndView("redirect:/document/list");
	    }
		Map<String, List<AttachmentDto>> fileMap = documentManager.mapFilesByTypes(document.getFiles());
		DocumentTypeDto type = new DocumentTypeDto();
		type.setExistingCodes(fileMap.keySet());
		if(!fileMap.keySet().isEmpty()) {
			modelAndView.addObject("fileMap", fileMap);
			modelAndView.addObject("existedTypes", documentTypeManager.getExistedTypes(type));
			
			List<String> documentExtensions = new ArrayList<>();
			Arrays.asList(FileExtensionDocumentEnum.values()).stream().forEach(item -> documentExtensions.add(item.val));
			modelAndView.addObject("documentExtensions", documentExtensions);
			
			List<String> videoExtensions = new ArrayList<>();
			Arrays.asList(FileExtensionVideoEnum.values()).stream().forEach(item -> videoExtensions.add(item.val));
			modelAndView.addObject("videoExtensions", videoExtensions);
			
			List<String> imageExtensions = new ArrayList<>();
			Arrays.asList(FileExtensionEnum.values()).stream().forEach(item -> imageExtensions.add(item.val));
			modelAndView.addObject("imageExtensions", imageExtensions);
			
			modelAndView.addObject("hasFiles", !document.getFiles().isEmpty() ? document.getFiles().size() : null);
		}
		Integer defaultNumber = 7;
		SystemParameterDto systemParameterDto = systemParameterManager.getByParamName(SystemParamEnum.DOCUMENT_DAYS_BEFORE_CANT_SAVE.param);
		if(systemParameterDto != null) {
			defaultNumber = Integer.parseInt(systemParameterDto.getParamValue());
		}
		if(document.getCreatedDate().plusDays(defaultNumber).isBefore(LocalDate.now()))
			modelAndView.addObject("isLate", true);
		
		modelAndView.addObject("documentTypes", documentTypeManager.getActiveTypes(type));
		modelAndView.addObject("document", document);

        return modelAndView;
    }

    @PostMapping("/save")
    @ResponseBody
    public boolean save(@Valid DocumentDto document) throws IOException {
        log.debug("entering 'save' method...");
        Boolean updated = false;
        
        if (document.getId() != null) {
        	List<AttachmentDto> attachmentDtos = new ArrayList<>();
        	if(!CollectionUtils.isEmpty(document.getFiles())) {
        		for (AttachmentDto item : document.getFiles()) {
    				if (item.getFile().getSize() <= maxSize) {
    					try {
    						item.setUrl(Base64.getEncoder().encodeToString(item.getFile().getBytes()));
    						item.setFileName(item.getFile().getOriginalFilename());
    						if (StringUtils.isNotBlank(item.getFileName())) {
    							item.setFileType(FilenameUtils.getExtension(item.getFileName()));
    						}
							item.setFileSize(item.getFile().getSize());
    						attachmentDtos.add(item);
    					} catch (IOException e) {
    						e.printStackTrace();
    						return updated;
    					}
    				}
    			}
        	}
        	document.setFiles(attachmentDtos);
			EntityResponse response = documentManager.save(document);
			if (EntityResponseCodeEnum.SUCCESS_200.val.equals(response.getCode())) {
				updated = true;
			}
		}
        return updated;
    }
    
}