package com.keysoft.pigfarm.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.common.DatePatternEnum;
import com.keysoft.pigfarm.common.OtherCostEnum;
import com.keysoft.pigfarm.common.PageDto;
import com.keysoft.pigfarm.common.TransCodeTypeEnum;
import com.keysoft.pigfarm.constant.ModelViewEnum;
import com.keysoft.pigfarm.helper.DateTimeHelper;
import com.keysoft.pigfarm.manager.FarmManager;
import com.keysoft.pigfarm.manager.OtherCostManager;
import com.keysoft.pigfarm.manager.TransCodeManager;
import com.keysoft.pigfarm.production.dto.FarmDto;
import com.keysoft.pigfarm.production.dto.OtherCostDto;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
 @Slf4j
@Controller
public class OtherCostController extends BaseController {
	@Autowired
	private OtherCostManager otherCostManager;
	@Autowired
	private FarmManager farmManager;
	@Autowired
	private TransCodeManager transCodeManager;
	
	// consumingWater
    @GetMapping("/consumingWater/list")
    public ModelAndView listConsumingWater(HttpServletRequest request) throws Exception {
    	log.debug("entering 'list' method...");
		ModelAndView modelAndView = new ModelAndView("consumingwater-list");
		OtherCostDto criteria = OtherCostDto.builder()
									.page(appProperties.getDefaultPage())
									.size(appProperties.getDefaultPageSize())
									.build();
		PageDto page = otherCostManager.search(criteria);
		List<String> otherCostTypes = new ArrayList<String>();
        Arrays.asList(OtherCostEnum.values()).stream().forEach(item -> otherCostTypes.add(item.value));
        
        modelAndView.addObject("otherCostTypes", otherCostTypes);
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, page);
		modelAndView.addObject("criteria", criteria);
        return modelAndView;
    }
    
    @PostMapping("/consumingWater/list")
    public ModelAndView searchConsumingWater(@Valid OtherCostDto criteria, BindingResult bindingResult){
    	log.debug("entering 'search' method...");
		ModelAndView modelAndView = new ModelAndView("consumingwater-list");
		List<String> otherCostTypes = new ArrayList<String>();
        Arrays.asList(OtherCostEnum.values()).stream().forEach(item -> otherCostTypes.add(item.value));
        
        modelAndView.addObject("otherCostTypes", otherCostTypes);
		modelAndView.addObject("page", otherCostManager.search(criteria));
		modelAndView.addObject("criteria", criteria);

        return modelAndView;
    }
    
    @ModelAttribute
    @GetMapping("/consumingWater/form")
    public ModelAndView showform(@RequestParam (value="id", required=false) Long id, HttpServletRequest request) throws Exception {
    	log.debug("entering 'show' method...");
    	Locale locale = request.getLocale();
    	
    	ModelAndView modelAndView = new ModelAndView("consumingwater-form");
    	OtherCostDto otherCost = new OtherCostDto();
    	List<FarmDto> farms = farmManager.getFarmByUserName();
        if (id != null) {
        	otherCost = otherCostManager.get(id);
        	if(otherCost == null) {
        		addError(request, getText("data.notfound", locale));
				return new ModelAndView("redirect:/consumingWater/list");
        	}
        	
        	otherCost.setConsumingDate(DateTimeHelper.toDateTimeString(otherCost.getRecordDate(), DatePatternEnum.DD_MM_YYYY_2.pattern));
        } else {
        	otherCost.setTransCode(transCodeManager.getTransCode(TransCodeTypeEnum.ORTHER_COST.val));
        }
        List<String> otherCostTypes = new ArrayList<String>();
        Arrays.asList(OtherCostEnum.values()).stream().forEach(item -> otherCostTypes.add(item.value));
        
        modelAndView.addObject("otherCostTypes", otherCostTypes);
        modelAndView.addObject("farms", farms);
		modelAndView.addObject("otherCost", otherCost);

        return modelAndView;
    }
    
    @PostMapping("/consumingWater/save")
    public String save(@Valid OtherCostDto otherCostDto, HttpServletRequest request, BindingResult bindingResult) throws Exception {
        log.debug("entering 'save' method...");
        Locale locale = request.getLocale();
        String view = "redirect:/consumingWater/list";
        if (bindingResult.hasErrors()) {
			addError(request, bindingResult.getAllErrors().toString());
			return view;
		}
        try {
        	 OtherCostDto savedOtherCost = otherCostManager.save(otherCostDto);
        	 if (savedOtherCost != null)
             	addMessage(request, getText("otherCost.updated.success", locale));
             else
            	 addError(request, getText("otherCost.updated.fail", locale));
		} catch (Exception e) {
			log.error("Save OtherCost error : " + e);
			addError(request, getText("otherCost.updated.fail", locale));
		}
        return "redirect:/consumingWater/list";
    }
    
}