package com.keysoft.pigfarm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.keysoft.pigfarm.common.MapKeyEnum;
import com.keysoft.pigfarm.config.AppProperties;
import com.keysoft.pigfarm.constant.MailEnum;
import com.keysoft.pigfarm.constant.ModelViewEnum;
import com.keysoft.pigfarm.manager.FarmUserManager;
import com.keysoft.pigfarm.manager.GroupManager;
import com.keysoft.pigfarm.manager.MailManager;
import com.keysoft.pigfarm.manager.UserManager;
import com.keysoft.pigfarm.master.dto.GroupDto;
import com.keysoft.pigfarm.master.dto.UserDto;
import com.keysoft.pigfarm.production.dto.MailDto;
import com.keysoft.pigfarm.util.UserContext;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Controller
public class UserController extends BaseController   {
	@Autowired
    private UserManager userManager;
	@Autowired
    private GroupManager groupManager;
	@Autowired
	private AppProperties appProperties;
	@Autowired
	private FarmUserManager farmUserManager;
	@Autowired
	private MailManager mailManager;
	
	@GetMapping("/user/list")
    public ModelAndView list(HttpServletRequest request ) {
    	log.debug("entering 'list' method...");    	
		ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_USER_LIST.mav);
		return modelAndView.addObject("page", userManager.gets(appProperties.getDefaultPage(), appProperties.getDefaultPageSize()));
    }

	
	@PostMapping("/user/list")
    public ModelAndView search(@Valid UserDto userCriteria ,HttpServletRequest request ) {
    	log.debug("entering 'search' method...");
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_USER_LIST.mav);
		if(userCriteria != null && userCriteria.getSize() == null) {
			userCriteria.setPage(appProperties.getDefaultPage());
			userCriteria.setSize(appProperties.getDefaultPageSize());
		}
		modelAndView.addObject(ModelViewEnum.MODEL_PAGE.mav, userManager.search(userCriteria));
		modelAndView.addObject("userCriteria",userCriteria);
        return modelAndView;
    }
    
    
	@GetMapping("/user/form")
    public ModelAndView show(@RequestParam(value="id", required=false) String id, HttpServletRequest request) {
    	log.debug("entering 'show' method...");
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_USER_FORM.mav);
    	
    	UserDto user = new UserDto();
    	if (StringUtils.isNotBlank(id)) {
        	user = userManager.get(id);
    	}
    	
		List<GroupDto> groups = groupManager.gets();
    	modelAndView.addObject("groups"	, groups);
    	modelAndView.addObject("appUser", user);

        return modelAndView;
    }
    
	@GetMapping("/user/form/info")
    public ModelAndView showFormInfo(@RequestParam(value="id", required=false) String id, HttpServletRequest request) {
    	log.debug("entering 'showFormInfo' method...");
    	
    	boolean isNew = (id == null);
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_USER_FORM_INFO.mav);
    	UserDto user = null;
    	user = isNew ? new UserDto() : userManager.get(id) ;
    	modelAndView.addObject("user", user);
        return modelAndView;
    }
    
    
	@GetMapping("/user/form/privileges")
    public ModelAndView showFormPrivileges(@RequestParam(value="id", required=true) String id, HttpServletRequest request) {
    	log.debug("entering 'showFormPrivileges' method...");
    	
    	ModelAndView modelAndView = new ModelAndView(ModelViewEnum.VIEW_USER_FORM_PRIVILEGES.mav);
    	modelAndView.addObject("appGroups", groupManager.gets());
//    	modelAndView.addObject("appGroups", appGroupManager.gets().stream().filter(g -> g.getId() != -1).collect(Collectors.toList()));
    	modelAndView.addObject("user", userManager.get(id));

        return modelAndView;
    }
    

	@PostMapping("/user/save")
    public String save(@Valid UserDto userDto, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'save' method... {}", userDto);
     
        String loginedUser = UserContext.getUsername();
        Locale locale = request.getLocale();
        boolean isNew = StringUtils.isBlank(userDto.getId());
        String view = "redirect:/user/form";
        
        String msg = null;
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        
    	// set password random
//    	String passWord = generateRandomPassword();
    	String passWord = "1234567a@";			// Temporary
    	if (isNew) {
    		log.debug("creating a new user...");
    		userDto.setPassword(passWord);
    		userDto.setCreatedBy(loginedUser);
    		userDto.setModifiedBy(loginedUser);
    		Object[] args = {passWord};
    		addMessage(request, getText("user.msgs.userCreated", args, locale));
    	} else {
    		log.debug("updating user info...");
    		userDto.setModifiedBy(loginedUser);
    		msg = getText("user.updated", locale);
        	addMessage(request, msg);
    		view = "redirect:/user/list";
    	}
        
        userDto = userManager.save(userDto);
        
        Map<String, String> farmUserMap = new HashMap<>();
        farmUserMap.put(MapKeyEnum.USERNAME.key, userDto.getUsername());
        farmUserMap.put(MapKeyEnum.SELECTED_FARM_CODES.key, userDto.getSelectedFarmCodes());
        farmUserManager.save(farmUserMap);

    	// TODO: should send mail to user
        
        if (isNew) {
        	view = "redirect:/user/form?id=" + userDto.getId();
        	//log.debug("===========", userDto.getUsername());
			//String  msgContent = "Your account has been created successfully. Login information - username : <b>" + userDto.getUsername()+ "</b>" + " password : " +"<b>" + passWord + " </b> .Do not share with everyone!";
			//mailManager.sendMail((MailDto)MailDto.builder()
			//mailTo(userDto.getUsername()) .subject(MailEnum.EMAIL_SUBJECT.val)
			//mailContent(msgContent) .build());
        }

        return view;
    }
    
	@PostMapping("/user/save/privileges")
    public String savePrivileges(@Valid UserDto user, BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response) {
        log.debug("entering 'savePrivileges' method...");
        
        String logineduser = UserContext.getUsername();
        Locale locale = request.getLocale();
//        String view = "redirect:/user/form/privileges?id=" + user.getId();
        String view = "redirect:/user/list" ;
        if (bindingResult.hasErrors()) {
        	addError(request, bindingResult.getAllErrors().toString());
            return view;
        }
        
        log.debug("user={}", user);
       	
        user.setModifiedBy(logineduser);
        userManager.savePrivileges(user);
        addMessage(request, getText("user.privileges.updated", locale));
        
       	return view;
    }
    
    // get view user reset password by himself
	@GetMapping(value = "/user/resetpw/{id}")
    public ModelAndView resetUserPassword(@PathVariable(required = true, name = "id") String userId, HttpServletRequest request ,Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView();
    	UserDto userDto = new UserDto();
    	userDto.setId(userId);
    	String passWord = generateRandomPassword();
    	userDto.setPassword(passWord);
    	UserDto user = userManager.resetPassword(userDto);
    	log.debug("isReset, {}", user);
    	Object[] args = {passWord};
    	String mail = user.getEmail();
    	try {
    		if (StringUtils.isNoneBlank(mail) && mail.contains("@")) {
    			String msgContent = "Your account was changed. Login information - username: <b> " + user.getEmail() + "</b> password: <b>" + passWord + "</b>. Do not share with everyone!";
    			mailManager.sendMail((MailDto) MailDto.builder()
    					.mailTo(user.getEmail())
    					.subject(MailEnum.EMAIL_SUBJECT.val)
    					.mailContent(msgContent)
    					.build());
    			addMessage(request, getText("user.msgs.resetpw", args, request.getLocale()));
    		} else {
    			addMessage(request, getText("user.msgs.resetpw.notMail", args, request.getLocale()));
    		}
		} catch (Exception e) {
			addMessage(request, getText("user.msgs.resetpw", args, request.getLocale()));
			e.printStackTrace();
		}
		modelAndView.setViewName("redirect:/user/list");
		
    	return modelAndView;
    }
	
    // User reset password by himself
	@PostMapping(value = "/user/resetpw")
    public ModelAndView changePassword(@Valid UserDto user, HttpServletRequest request) {
    	log.info("process, changePw method...");

    	ModelAndView modelAndView = new ModelAndView("redirect:/user/set-password");
    	try {
    		UserDto userDto = userManager.resetPassword(user);	
    		addMessage(request, getText("user.msgs.resetpw", request.getLocale()));
    	} catch(Exception e) {
    		addError(request, getText("user.changedpw.error", request.getLocale()));
    	}
    	return modelAndView;
    }
    
	@GetMapping("/user/set-password")
	public ModelAndView handleResetPassword() {
		ModelAndView modelAndView = new ModelAndView("user-reset-password");
		return modelAndView;
	}
	
	// Set password of all user by admin
   	@PostMapping(value = "/user/set-password")
    public ResponseEntity<?> changeRandomPassword( HttpServletRequest request) throws Exception {
       	log.info("process = set manual password method...");

		return ResponseEntity.ok(null);
    }
    
    private String generateRandomPassword() {
    	String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    	return RandomStringUtils.random( 8, characters );
    }

    @GetMapping("/user/checkUsername")
    public @ResponseBody Boolean checkUsername(@RequestParam(value="username", required=true) String username) {
    	log.debug("entering check username , name =  ", username);
    	return userManager.isExistedUsername(username) ;
    }
}