package com.keysoft.pigfarm.manager;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.keysoft.pigfarm.config.ServiceProperties;
import com.keysoft.pigfarm.constant.ApiEnum;
import com.keysoft.pigfarm.master.dto.GroupDto;
import com.keysoft.pigfarm.util.RestHelper;

import lombok.extern.slf4j.Slf4j;

/**
 * Generated by Speed Generator
 * 
 * @author <a href="mailto:ngtrungkien@gmail.com">Kien Nguyen</a>
 */
@Slf4j
@Service
public class GroupManager {

	@Autowired
	private RestHelper restHelper;
	
	@Autowired
	private ServiceProperties serviceProperties;
	
	public GroupDto get(String id) {
		log.info("process=get-group, id={}", id);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_GROUP_GET.val), HttpMethod.GET, GroupDto.class, id);
		return (GroupDto) response.getBody();
	}
	
	@SuppressWarnings("unchecked")
	public List<GroupDto> gets() {
		log.info("process=get-groups");
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_GROUP_GETS.val), HttpMethod.GET, new ParameterizedTypeReference<List<GroupDto>>(){});
		return (List<GroupDto>)response.getBody();
	}
	
	public GroupDto save(GroupDto appGroupDto) {
		log.info("process=save-group, group={}", appGroupDto);
		
		ResponseEntity<?> response = null;
		if (StringUtils.isNotBlank(appGroupDto.getId()))
			response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_GROUP_UPDATE.val), HttpMethod.PUT, appGroupDto, GroupDto.class, appGroupDto.getId());
		else
			response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_GROUP_CREATE.val), HttpMethod.POST, appGroupDto, GroupDto.class);

		return (GroupDto)response.getBody();
	}
	
	@SuppressWarnings("unchecked")
	public List<GroupDto> search(GroupDto criteria) {
		log.info("process=search-group, group={}", criteria);
		ResponseEntity<?> response = restHelper.send(serviceProperties.getPaths().get(ApiEnum.PATH_GROUP_GETS.val),HttpMethod.POST, criteria,new ParameterizedTypeReference<List<GroupDto>>(){});
		return (List<GroupDto>) response.getBody();
	}
	
	public void delete(GroupDto appGroupDto) {
	}
}